// src/services/bankConfig.service.js
const { PrismaClient } = require("../generated/prisma");
const prisma = new PrismaClient();

// üß© T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c·∫•u h√¨nh ng√¢n h√†ng
async function upsertBankConfig(req, res) {
  try {
    const { landlordId, bankCode, bankName, accountNo, accountName } = req.body;

    if (!landlordId)
      return res.status(400).json({ message: "Thi·∫øu landlordId" });
    if (!bankCode || !bankName || !accountNo || !accountName)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ng√¢n h√†ng" });

    // üü© Ki·ªÉm tra xem landlord ƒë√£ c√≥ c·∫•u h√¨nh ch∆∞a
    const existing = await prisma.bankConfig.findUnique({
      where: { landlordId: Number(landlordId) },
    });

    let config;
    if (existing) {
      // N·∫øu c√≥ ‚Üí c·∫≠p nh·∫≠t
      config = await prisma.bankConfig.update({
        where: { landlordId: Number(landlordId) },
        data: { bankCode, bankName, accountNo, accountName },
      });
    } else {
      // N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
      config = await prisma.bankConfig.create({
        data: {
          landlordId: Number(landlordId),
          bankCode,
          bankName,
          accountNo,
          accountName,
        },
      });
    }

    return res.status(200).json({
      message: "C·∫•u h√¨nh ng√¢n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng",
      config,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh ng√¢n h√†ng:", error);
    return res.status(500).json({ message: error.message });
  }
}

// üß≠ L·∫•y th√¥ng tin c·∫•u h√¨nh ng√¢n h√†ng theo landlordId
async function getBankConfig(req, res) {
  try {
    const { landlordId } = req.params;

    const config = await prisma.bankConfig.findUnique({
      where: { landlordId: Number(landlordId) },
    });

    if (!config) {
      return res
        .status(404)
        .json({ message: "C·∫•u h√¨nh ng√¢n h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    return res.status(200).json(config);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng√¢n h√†ng:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

// üß© Export cho router d√πng
module.exports = {
  upsertBankConfig,
  getBankConfig,
};
