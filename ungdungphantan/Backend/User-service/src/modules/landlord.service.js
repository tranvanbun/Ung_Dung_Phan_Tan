import { PrismaClient } from "../../src/generated/prisma/index.js";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

export const registerLandlord = async (req, res) => {
  try {
    const data = req.body;
    console.log("üì¶ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", data);

    // 1Ô∏è‚É£ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!data.email?.trim() || !data.password?.trim()) {
      return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      return res.status(400).json({ message: "ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá" });
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra email t·ªìn t·∫°i trong 3 b·∫£ng
    const [existingUser, existingLandlord, existingAdmin] = await Promise.all([
      prisma.user.findUnique({ where: { email: data.email } }),
      prisma.landlord.findUnique({ where: { email: data.email } }),
      prisma.admin.findUnique({ where: { email: data.email } }),
    ]);

    if (existingUser || existingLandlord || existingAdmin) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng" });
    }

    // 4Ô∏è‚É£ Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
    if (data.password.length < 8) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±" });
    }

    // 5Ô∏è‚É£ M√£ ho√° m·∫≠t kh·∫©u
    const hashed = await bcrypt.hash(data.password, 10);

    // 6Ô∏è‚É£ T·∫°o landlord m·ªõi
    const landlord = await prisma.landlord.create({
      data: {
        email: data.email.trim(),
        password: hashed,
        name: data.name?.trim() || null,
        phone: data.phone?.trim() || null,
        address: data.address?.trim() || null,
      },
    });

    // 7Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£
    return res.status(201).json({
      message: "ƒêƒÉng k√Ω landlord th√†nh c√¥ng",
      landlord: {
        id: landlord.id,
        email: landlord.email,
        name: landlord.name,
        phone: landlord.phone,
        address: landlord.address,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω landlord:", err);
    return res.status(500).json({ message: err.message });
  }
};


export const getLandlordById = async (req, res) => {
  try {
    const id = Number(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "ID kh√¥ng h·ª£p l·ªá" });
    }
    const landlord = await prisma.landlord.findUnique({
      where: { id },
      select: {
        id: true,
        email: true,
        name: true,
        phone: true,
        address: true,
        signaturePath: true,
      },
    });
    if (!landlord) {
      return res.status(404).json({ error: "Ch·ªß nh√† kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json(landlord);
  } catch (error) {
    console.error("l·ªói:",error)
    res.status(500).json({ error : error.message});
  }
};
