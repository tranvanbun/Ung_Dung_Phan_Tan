import { PrismaClient } from "../../src/generated/prisma/index.js";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

/**
 * ƒêƒÉng nh·∫≠p (check trong 3 b·∫£ng: user, landlord, admin)
 * ‚ùå Kh√¥ng s·ª≠ d·ª•ng JWT
 */
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // 1Ô∏è‚É£ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
    if (!email || !password) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u" });
    }

    // 2Ô∏è‚É£ T√¨m ng∆∞·ªùi d√πng trong 3 b·∫£ng
    let user =
      (await prisma.user.findUnique({ where: { email } })) ||
      (await prisma.landlord.findUnique({ where: { email } })) ||
      (await prisma.admin.findUnique({ where: { email } }));

    if (!user) {
      return res
        .status(404)
        .json({ message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng" });
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra m·∫≠t kh·∫©u
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    // 4Ô∏è‚É£ X√°c ƒë·ªãnh role theo b·∫£ng
    let role = "USER";
    if (await prisma.landlord.findUnique({ where: { email } }))
      role = "LANDLORD";
    if (await prisma.admin.findUnique({ where: { email } })) role = "ADMIN";

    // 5Ô∏è‚É£ Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng (kh√¥ng t·∫°o token)
    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng ‚úÖ",
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role,
      },
    });
  } catch (error) {
    console.error("üî• L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    return res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
};
